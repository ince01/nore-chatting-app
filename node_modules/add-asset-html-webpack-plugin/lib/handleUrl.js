"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _globby() {
  const data = _interopRequireDefault(require("globby"));

  _globby = function _globby() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * handle globby filepath and return an array with all matched assets.
 *
 * @export
 * @param {Array} assets
 * @returns
 */
function _default(_x) {
  return _ref.apply(this, arguments);
}

function _ref() {
  _ref = _asyncToGenerator(function* (assets) {
    const globbyAssets = [];
    const normalAssets = []; // if filepath is null or undefined, just bubble up.

    assets.forEach(asset => asset.filepath && _globby().default.hasMagic(asset.filepath) ? globbyAssets.push(asset) : normalAssets.push(asset));
    const ret = [];
    yield Promise.all(globbyAssets.map(asset => (0, _globby().default)(asset.filepath).then(paths => paths.forEach(path => ret.push(Object.assign({}, asset, {
      filepath: path
    }))))));
    return ret.concat(normalAssets);
  });
  return _ref.apply(this, arguments);
}

module.exports = exports.default;